'CR6 Datalogger
'Date: 09/12/2024
'Program author: Liam Eime

'This program is designed for a micro-bridge demonstration project. It is designed to collect data from the following sensors and for the following purposes:
  '5 foil strain gauges, each forming a quarter of a full-bridge. The strain is measured using 4WFBS350 full-bridge terminal input modules.
    'Strain gauges 1-4 are placed symmetrically on the 4 pillars of the micro-bridge, and are used like a mass/weight reading to determine the centre of mass/load of the bridge.
    'Strain gauge 5 is placed on the underside of the bridge as a way to convert the strain to a mass/weight with calibration.
  '1 tri-axis accelerometer, reading only the z-axis currently due to availability of universal terminals on the CR6.
    'Accelerometer is used to measure bridge vibrations.
  '1 Tfmini Plus LiDAR sensor. It uses the UART serial and digital communication protocol.
    'LiDAR is used to measure the distance from the ground up to the underside of the bridge, to measure bridge deflections.
    
'This project does come with the following issues:
  'The LiDAR sensor is limited by its resolution of only 1cm.
  'The centre of mass result is certainly not accurate. With the current bridge and set-up, the changes in strain for the 4 pillar strain gauges is too insensitive to loading the bridge.
    'These gauges also appear to read/produce quite a bit of noise which destabilises the result of determining the centre, especially after zeroing the strain.
    'The sensitivity to noise is somewhat combated by taking the average reading of the strain over some less frequent interval than the scan rate.
    'The averaging involves a trade-off between response time and sensitivity to noise:
      'The slower the scan rate the less sentitive the calculation of the centre is to noise, but the response time to update the centre is decreased.
  'Similar noise issue are present with the mass/weight strain reading, resulting in an unstable value.

PipeLineMode

'Declare Constants.
Const GaugeFactor = 2.10
Const AccelMultiplier = 1/334.11
Const AccelOffset = 2503.15
Const BaudRate = 115200
Const Cx = 125  :  Const Cy = 225  'Measured distances from centre of bridge to strain gauges (in mm).

'Declare Public Variables.
Public StrainCompensated(5)  :  Units StrainCompensated = µe  'StrainCompensated is the calculated strain from the raw mV/V.
Public StrainCalibrated(4)   :  Units StrainCalibrated = µe  'StrainCalibrated is for the calibration of the four gauges used for finding the centre.
Public Centre(2)             :  Units Centre = mm  '(x,y) centre.
Public MassCompensated       :  Units MassCompensated = kg
Public InputMass             :  Units InputMass = kg  'For mass/weight calibration.
Public AccelCompensated      :  Units AccelCompensated = Gs
Public DistanceCompensated   :  Units DistanceCompensated = cm
Public NBytesReturned        :  Units NBytesReturned = bytes  'Used to confirm serial comm receives the 2 bytes of data for the distance.

Public ZeroStrain As Boolean = False
Public ZeroMass As Boolean = False
Public ZeroDistance As Boolean = False
Public CalibStrain As Boolean = False
Public CalibMass As Boolean = False

'Alias' for readability.
Alias StrainCalibrated(1) = Strain1
Alias StrainCalibrated(2) = Strain2
Alias StrainCalibrated(3) = Strain3
Alias StrainCalibrated(4) = Strain4
Alias StrainCompensated(5) = MassRaw

'Declare Private Variables.
Dim StrainRaw(5)     :  Units StrainRaw = mV/V
Dim StrainOffset(5)  :  Units StrainOffset = mV/V
Dim Positions(4,2)   :  Units Positions = mm
Dim MassMultiplier   :  Units MassMultiplier = kg/µe
Dim MassOffset       :  Units MassOffset = µe
Dim AccelRaw         :  Units AccelRaw = mV
Dim Distance         :  Units Distance = cm
Dim DistanceOffset   :  Units DistanceOffset = cm


Dim DistanceRaw(2) As Long
Dim tmp As Long  'Temporary memory for storing distance bytes.

Dim TotalStrain             
Dim AverageStrain(5)
Dim StrainCalibrationFactor(5)

'Define Data Tables.
DataTable (MeasurementsTable,True,-1 )
  Sample (4,StrainCalibrated(),FP2)
  Sample (1,MassCompensated,FP2)
  Sample (2,Centre(),FP2)
  Sample (1,AccelCompensated,FP2)
  Sample (1,DistanceCompensated,FP2)
EndTable

DataTable (AveragesTable,True,-1 )
  DataInterval (0,1,Sec,10)  'There is  noise insensitivity and centre calculation response time trade-off with this interval.
  Average (4,StrainCalibrated(),FP2,False)  'Average strain used for centre calculations.
  Average (1,MassCompensated,FP2,False)  'Average mass provided for more stable mass result.
EndTable

'Main Program.
BeginProg
  
  'Initialise variables.
  StrainCalibrationFactor() = 1
  MassMultiplier = 1
    'Positions of the four strain gauges used for determining centre.
    'Positions(n,p): n = strain gauge number, p = 1 for x-coord and 2 for y-coord .
  Positions(1,1) = -Cx : Positions(1,2) = -Cy 
	Positions(2,1) = Cx  : Positions(2,2) = -Cy
	Positions(3,1) = -Cx : Positions(3,2) = Cy
	Positions(4,1) = Cx  : Positions(4,2) = Cy
	
  SerialOpen (ComC1,BaudRate,19,0,1000)  'Establish the serial comm for the TFmini Plus LiDAR.
	
	Scan (100,mSec,0,0)
	  'Obtain strain gauge averages and determine the centre.
	  AverageStrain(1) = AveragesTable.Strain1_Avg  :  AverageStrain(2) = AveragesTable.Strain2_Avg
    AverageStrain(3) = AveragesTable.Strain3_Avg  :  AverageStrain(4) = AveragesTable.Strain4_Avg
	  TotalStrain = AverageStrain(1) + AverageStrain(2) + AverageStrain(3) + AverageStrain(4) 
    Centre(1) = (Positions(1,1)*AverageStrain(1) + Positions(2,1)*AverageStrain(2) + Positions(3,1)*AverageStrain(3) + Positions(4,1)*AverageStrain(4)) / TotalStrain    
    Centre(2) = (Positions(1,2)*AverageStrain(1) + Positions(2,2)*AverageStrain(2) + Positions(3,2)*AverageStrain(3) + Positions(4,2)*AverageStrain(4)) / TotalStrain    

    'Record the serial comm data for the TFmini Plus LiDAR distance measurement.
    SerialInRecord (ComC1,tmp,&H5959,2,0,NBytesReturned,00)  'Read only the 2 bytes (distance_low distance_high) after the 0x59 0x59 header .
    MoveBytes (DistanceRaw(1),3,tmp,0,1)
    MoveBytes (DistanceRaw(2),3,tmp,1,1)
    Distance = HexToDec (Hex (DistanceRaw(2)) & Hex (DistanceRaw(1)))  'Distance bytes out from the LiDAR sensor are in little endian format.
    DistanceCompensated = Distance - DistanceOffset
	  
    'Read strain gauges and calculate their strain.
		BrFull (StrainRaw(),5,mv5000,U1,U11,5,2500,False,False,100,15000,1,0)
    StrainCalc (StrainCompensated(),5,StrainRaw(),StrainOffset(),-1,GaugeFactor,0)
    'Calibrate strain gauges.
    StrainCalibrated() = StrainCompensated() * StrainCalibrationFactor()

    'Determine mass/weight of load.
    MassCompensated = (MassRaw - MassOffset) * MassMultiplier

    'Read accelerometer and calculate acceleration.
		VoltSe (AccelRaw,1,mV5000,U12,1,0,15000,1,0)
    AccelCompensated = (AccelRaw - AccelOffset) * AccelMultiplier
		
    CallTable MeasurementsTable
    CallTable AveragesTable
    
    'Zero the four strain gauges used for finding the centre.
    If ZeroStrain = True Then
      StrainOffset(1) = StrainRaw(1)  :  StrainOffset(2) = StrainRaw(2)
      StrainOffset(3) = StrainRaw(3)  :  StrainOffset(4) = StrainRaw(4)
      ZeroStrain = False
    EndIf
    
    'Zero the "mass" measured (strain gauge 5, used for determining the mass)
    If ZeroMass = True Then
      MassOffset = MassRaw
      ZeroMass = False
    EndIf
    
    'Zero the distance measurement.
    If ZeroDistance = True Then
      DistanceOffset = Distance
      ZeroDistance = False
    EndIf
    
    'Calibrate the four strain gauges used for finding the centre
    If CalibStrain = True Then
      StrainCalibrationFactor() = 1 / StrainCompensated()
      CalibStrain = False
    EndIf
    
    'Calibrate the "mass" measured
    If CalibMass = True Then
      MassMultiplier = InputMass / (MassRaw - MassOffset)
      CalibMass = False  
    EndIf    

	NextScan
EndProg

